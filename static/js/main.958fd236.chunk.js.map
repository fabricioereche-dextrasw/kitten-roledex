{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","kitten","id","name","email","CardList","kittens","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredkittens","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAEaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBACIC,IAAI,SACJC,IAAG,+BAA0BH,EAAMI,OAAOC,GAAvC,4BAEP,6BAAKL,EAAMI,OAAOE,OAClB,4BAAIN,EAAMI,OAAOG,YCLZC,G,MAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,QAAQC,KAAI,SAAAN,GAAM,OACrB,cAAC,EAAD,CAAsBA,OAAQA,GAAnBA,EAAOC,WCLjBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCyCDG,E,kDAxCb,aAAc,IAAD,8BACX,gBAeFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAdrC,EAAKC,MAAQ,CACXb,QAAS,GACTU,YAAa,IALJ,E,qDAUb,WAAoB,IAAD,OACjBI,MAAM,8CACHC,MAAK,SAAAC,GAAc,OAAOA,EAASC,UACjCF,MAAK,SAAAG,GAAW,EAAKT,SAAS,CAACT,QAASkB,S,oBAO/C,WAEE,MAAiCC,KAAKN,MAA9Bb,EAAR,EAAQA,QAASU,EAAjB,EAAiBA,YACXU,EAAkBpB,EAAQqB,QAAO,SAAA1B,GAAM,OAC3CA,EAAOE,KAAKyB,cAAcC,SAASb,EAAYY,kBAGjD,OACE,sBAAK9B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACEW,YAAY,iBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,QAASoB,W,GApCTI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.958fd236.chunk.js","sourcesContent":["import './card.styles.css';\r\n\r\nexport const Card = props => (\r\n    <div className=\"card-container\">\r\n        <img \r\n            alt=\"kitten\" \r\n            src={`https://robohash.org/${props.kitten.id}?set=set4&size=180x180`}>\r\n        </img>\r\n        <h2>{props.kitten.name}</h2>\r\n        <p>{props.kitten.email}</p>\r\n    </div>\r\n);","import { Card } from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => (\r\n    <div className=\"card-list\">  \r\n        {props.kittens.map(kitten => (\r\n            <Card key={kitten.id} kitten={kitten} />\r\n        ))}\r\n    </div>\r\n);","import './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input \r\n      className=\"search\"\r\n      type='search' \r\n      placeholder={placeholder}\r\n      onChange={handleChange} \r\n    />\r\n);","import { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport { CardList } from './components/card-list/card-list.component';\r\nimport { SearchBox } from './components/search-box/search-box.component';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n\r\n    this.state = {\r\n      kittens: [],\r\n      searchField: ''\r\n    };\r\n\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => { return response.json() })\r\n        .then(users => { this.setState({kittens: users}) })\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({searchField: e.target.value})\r\n  }\r\n\r\n  render(){\r\n\r\n    const { kittens, searchField } = this.state;\r\n    const filteredkittens = kittens.filter(kitten => (\r\n      kitten.name.toLowerCase().includes(searchField.toLowerCase())\r\n    ));\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Kittens Roledex</h1>\r\n        <SearchBox \r\n          placeholder=\"search kittens\"\r\n          handleChange={this.handleChange}\r\n        />\r\n        <CardList kittens={filteredkittens}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}